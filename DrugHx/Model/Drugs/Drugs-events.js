	//CALCULATE DAYS ON MEDICATION ---------------------------------------model.Drugs.days1.onGet = function() {	var oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds	var firstDate = new Date(this.startDate1);	var secondDate = new Date(this.endDate1);	var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime())/(oneDay)));	return diffDays;	};model.Drugs.days2.onGet = function() {		var oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds	var firstDate = new Date(this.startDate2);	var secondDate = new Date(this.endDate2);	var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime())/(oneDay)));	return diffDays;};model.Drugs.days3.onGet = function() {	var oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds	var firstDate = new Date(this.startDate3);	var secondDate = new Date(this.endDate3);	var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime())/(oneDay)));	return diffDays;};model.Drugs.days4.onGet = function() {	var oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds	var firstDate = new Date(this.startDate4);	var secondDate = new Date(this.endDate4);	var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime())/(oneDay)));	return diffDays;};model.Drugs.days5.onGet = function() {	var oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds	var firstDate = new Date(this.startDate5);	var secondDate = new Date(this.endDate5);	var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime())/(oneDay)));	return diffDays;};//CALCULATION ATTRIBUTE - DAILY DOSE FOR ORALS ONLY  #1model.Drugs.dailyDose1.onGet = function() {	var fx1a = this.drugFreq1;	var d1 =  this.drugDose1;	var freq1=0;	 	 switch (fx1a) { 	 case "od": freq1=1;break; 	 case "bd": freq1=2;break; 	 case "tds": freq1=3;break; 	 case "qid": freq1=4;break; 	 default: "NaN";break; 	 }if(d1 * freq1 >0){	return  (d1 * freq1).toFixed(1);}};